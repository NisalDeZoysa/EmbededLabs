
display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000002a6  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000deb  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000881  00000000  00000000  000011f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000569  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e0  00000000  00000000  000024db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002abb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <main>
  8e:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_send_command>:
	
}

void lcd_send_command (uint8_t command)
{
	DATA_BUS=(command&0b11110000); 
  96:	98 2f       	mov	r25, r24
  98:	90 7f       	andi	r25, 0xF0	; 240
  9a:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS &=~(1<<LCD_RS);
  9c:	43 98       	cbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
  9e:	45 9a       	sbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	e9 ef       	ldi	r30, 0xF9	; 249
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_send_command+0xe>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_send_command+0x14>
  aa:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
  ac:	45 98       	cbi	0x08, 5	; 8
  ae:	e9 ef       	ldi	r30, 0xF9	; 249
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <lcd_send_command+0x1c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <lcd_send_command+0x22>
  b8:	00 00       	nop
	_delay_ms(1);
	DATA_BUS=((command&0b00001111)<<4);
  ba:	f0 e1       	ldi	r31, 0x10	; 16
  bc:	8f 9f       	mul	r24, r31
  be:	c0 01       	movw	r24, r0
  c0:	11 24       	eor	r1, r1
  c2:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
  c4:	45 9a       	sbi	0x08, 5	; 8
  c6:	89 ef       	ldi	r24, 0xF9	; 249
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <lcd_send_command+0x34>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <lcd_send_command+0x3a>
  d0:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
  d2:	45 98       	cbi	0x08, 5	; 8
  d4:	e9 ef       	ldi	r30, 0xF9	; 249
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <lcd_send_command+0x42>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcd_send_command+0x48>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <lcd_init>:


void lcd_init(void)
{	
	
	DATA_DDR = (1<<LCD_D7) | (1<<LCD_D6) | (1<<LCD_D5)| (1<<LCD_D4);
  e2:	80 ef       	ldi	r24, 0xF0	; 240
  e4:	8a b9       	out	0x0a, r24	; 10
	CTL_DDR |= (1<<LCD_EN)|(1<<LCD_RW)|(1<<LCD_RS);
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	88 63       	ori	r24, 0x38	; 56
  ea:	87 b9       	out	0x07, r24	; 7

	
	DATA_BUS = (0<<LCD_D7)|(0<<LCD_D6)|(1<<LCD_D5)|(0<<LCD_D4);
  ec:	80 e2       	ldi	r24, 0x20	; 32
  ee:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS|= (1<<LCD_EN)|(0<<LCD_RW)|(0<<LCD_RS);
  f0:	45 9a       	sbi	0x08, 5	; 8
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <lcd_init+0x14>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_init+0x1a>
  fc:	00 00       	nop
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
  fe:	45 98       	cbi	0x08, 5	; 8
 100:	89 ef       	ldi	r24, 0xF9	; 249
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <lcd_init+0x22>
 108:	00 c0       	rjmp	.+0      	; 0x10a <lcd_init+0x28>
 10a:	00 00       	nop
	_delay_ms(1);
	
	lcd_send_command(LCD_CMD_4BIT_2ROW_5X7);
 10c:	88 e2       	ldi	r24, 0x28	; 40
 10e:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_send_command>
 112:	89 ef       	ldi	r24, 0xF9	; 249
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_init+0x34>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_init+0x3a>
 11c:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(LCD_CMD_DISPLAY_CURSOR_BLINK);
 11e:	8f e0       	ldi	r24, 0x0F	; 15
 120:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_send_command>
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x4c>
 12e:	00 00       	nop
	_delay_ms(1);
	lcd_send_command(0x80);
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_send_command>
 136:	08 95       	ret

00000138 <lcd_write_character>:
	}
}
void lcd_write_character(uint8_t character)
{
	
	DATA_BUS=(character & 0b11110000);
 138:	98 2f       	mov	r25, r24
 13a:	90 7f       	andi	r25, 0xF0	; 240
 13c:	9b b9       	out	0x0b, r25	; 11
	CTL_BUS|=(1<<LCD_RS);
 13e:	43 9a       	sbi	0x08, 3	; 8
	CTL_BUS |=(1<<LCD_EN);
 140:	45 9a       	sbi	0x08, 5	; 8
 142:	e3 ef       	ldi	r30, 0xF3	; 243
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_write_character+0xe>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_write_character+0x14>
 14c:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
 14e:	45 98       	cbi	0x08, 5	; 8
 150:	e3 ef       	ldi	r30, 0xF3	; 243
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	31 97       	sbiw	r30, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_write_character+0x1c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_write_character+0x22>
 15a:	00 00       	nop
	_delay_ms(2);
	DATA_BUS=((character & 0b00001111)<<4);
 15c:	f0 e1       	ldi	r31, 0x10	; 16
 15e:	8f 9f       	mul	r24, r31
 160:	c0 01       	movw	r24, r0
 162:	11 24       	eor	r1, r1
 164:	8b b9       	out	0x0b, r24	; 11
	CTL_BUS |=(1<<LCD_EN);
 166:	45 9a       	sbi	0x08, 5	; 8
 168:	83 ef       	ldi	r24, 0xF3	; 243
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_write_character+0x34>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_write_character+0x3a>
 172:	00 00       	nop
	_delay_ms(2);
	CTL_BUS &=~(1<<LCD_EN);
 174:	45 98       	cbi	0x08, 5	; 8
 176:	e3 ef       	ldi	r30, 0xF3	; 243
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <lcd_write_character+0x42>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <lcd_write_character+0x48>
 180:	00 00       	nop
 182:	08 95       	ret

00000184 <lcd_write_word>:
	_delay_ms(1);
	CTL_BUS &=~(1<<LCD_EN);
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ec 01       	movw	r28, r24
	int i=0;
	while(word[i]!='\0')
 18a:	88 81       	ld	r24, Y
 18c:	88 23       	and	r24, r24
 18e:	31 f0       	breq	.+12     	; 0x19c <lcd_write_word+0x18>
 190:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_write_character(word[i]);
 192:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_write_character>
	_delay_ms(1);
}
void lcd_write_word(uint8_t word[20])
{
	int i=0;
	while(word[i]!='\0')
 196:	89 91       	ld	r24, Y+
 198:	81 11       	cpse	r24, r1
 19a:	fb cf       	rjmp	.-10     	; 0x192 <lcd_write_word+0xe>
	{
		lcd_write_character(word[i]);
		i++;
	}
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <lcd_clear>:
	_delay_ms(2);
	
}
void lcd_clear(void)
{
	lcd_send_command(LCD_CMD_CLEAR_DISPLAY);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_send_command>
 1a8:	08 95       	ret

000001aa <lcd_goto_xy>:
	
}
void lcd_goto_xy (uint8_t line,uint8_t pos)				//line = 0 or 1
{
	lcd_send_command((0x80|(line<<6))+pos);
 1aa:	20 e4       	ldi	r18, 0x40	; 64
 1ac:	82 9f       	mul	r24, r18
 1ae:	c0 01       	movw	r24, r0
 1b0:	11 24       	eor	r1, r1
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	86 0f       	add	r24, r22
 1b6:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_send_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	8a 95       	dec	r24
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_goto_xy+0x12>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_goto_xy+0x18>
 1c2:	08 95       	ret

000001c4 <main>:
#include <util/delay.h>
#include <stdio.h>
#include <string.h>

int main(void)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	61 97       	sbiw	r28, 0x11	; 17
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
	lcd_init();
 1d8:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_init>
	char word_to_print[] = "Embedded Systems";
 1dc:	21 e1       	ldi	r18, 0x11	; 17
 1de:	e5 e0       	ldi	r30, 0x05	; 5
 1e0:	f1 e0       	ldi	r31, 0x01	; 1
 1e2:	ce 01       	movw	r24, r28
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	dc 01       	movw	r26, r24
 1e8:	01 90       	ld	r0, Z+
 1ea:	0d 92       	st	X+, r0
 1ec:	2a 95       	dec	r18
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x24>
	int word_length = strlen(word_to_print);
 1f0:	fc 01       	movw	r30, r24
 1f2:	01 90       	ld	r0, Z+
 1f4:	00 20       	and	r0, r0
 1f6:	e9 f7       	brne	.-6      	; 0x1f2 <main+0x2e>
 1f8:	31 97       	sbiw	r30, 0x01	; 1
 1fa:	e8 1b       	sub	r30, r24
 1fc:	f9 0b       	sbc	r31, r25
 1fe:	7f 01       	movw	r14, r30
 200:	5f 01       	movw	r10, r30
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	a2 1a       	sub	r10, r18
 206:	b2 0a       	sbc	r11, r18
	
	while(1)
	{
		

		for (int i = 0; i <= word_length; i++)
 208:	ff 20       	and	r15, r15
 20a:	bc f1       	brlt	.+110    	; 0x27a <main+0xb6>
 20c:	00 e0       	ldi	r16, 0x00	; 0
 20e:	10 e0       	ldi	r17, 0x00	; 0
		{
			lcd_clear();
 210:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_clear>
			lcd_goto_xy(0, i);
 214:	60 2f       	mov	r22, r16
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_goto_xy>
			lcd_write_word(word_to_print);
 21c:	ce 01       	movw	r24, r28
 21e:	01 96       	adiw	r24, 0x01	; 1
 220:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_word>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	8f e9       	ldi	r24, 0x9F	; 159
 226:	96 e8       	ldi	r25, 0x86	; 134
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	81 50       	subi	r24, 0x01	; 1
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	20 40       	sbci	r18, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x66>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x70>
 234:	00 00       	nop
	
	while(1)
	{
		

		for (int i = 0; i <= word_length; i++)
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	e0 16       	cp	r14, r16
 23c:	f1 06       	cpc	r15, r17
 23e:	44 f7       	brge	.-48     	; 0x210 <main+0x4c>
 240:	8e 01       	movw	r16, r28
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	1f 4f       	sbci	r17, 0xFF	; 255
 246:	68 01       	movw	r12, r16
 248:	ca 0c       	add	r12, r10
 24a:	db 1c       	adc	r13, r11
			lcd_goto_xy(0, i);
			lcd_write_word(word_to_print);
			_delay_ms(500);
		}
		for (int i = 0; i <= word_length; i++) {
			lcd_clear();
 24c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_clear>
			lcd_goto_xy(0, 0);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_goto_xy>
			lcd_write_word(&word_to_print[i]);
 258:	c8 01       	movw	r24, r16
 25a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_word>
 25e:	8f e9       	ldi	r24, 0x9F	; 159
 260:	96 e8       	ldi	r25, 0x86	; 134
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	81 50       	subi	r24, 0x01	; 1
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	20 40       	sbci	r18, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0xa0>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0xaa>
 26e:	00 00       	nop
 270:	0f 5f       	subi	r16, 0xFF	; 255
 272:	1f 4f       	sbci	r17, 0xFF	; 255
			lcd_clear();
			lcd_goto_xy(0, i);
			lcd_write_word(word_to_print);
			_delay_ms(500);
		}
		for (int i = 0; i <= word_length; i++) {
 274:	c0 16       	cp	r12, r16
 276:	d1 06       	cpc	r13, r17
 278:	49 f7       	brne	.-46     	; 0x24c <main+0x88>
			lcd_clear();
			lcd_goto_xy(0, 0);
			lcd_write_word(&word_to_print[i]);
			_delay_ms(500);
		}
		lcd_clear();
 27a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <lcd_clear>
		lcd_goto_xy(1, 0);
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 d5 00 	call	0x1aa	; 0x1aa <lcd_goto_xy>
		lcd_write_word("DEIE");
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_write_word>
 28e:	8f e3       	ldi	r24, 0x3F	; 63
 290:	9d e0       	ldi	r25, 0x0D	; 13
 292:	23 e0       	ldi	r18, 0x03	; 3
 294:	81 50       	subi	r24, 0x01	; 1
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	20 40       	sbci	r18, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <main+0xd0>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <main+0xda>
 29e:	00 00       	nop
 2a0:	b3 cf       	rjmp	.-154    	; 0x208 <main+0x44>

000002a2 <_exit>:
 2a2:	f8 94       	cli

000002a4 <__stop_program>:
 2a4:	ff cf       	rjmp	.-2      	; 0x2a4 <__stop_program>
